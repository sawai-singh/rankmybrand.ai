# RankMyBrand Optimized Docker Compose Configuration
# Only includes services that are ACTUALLY USED in the codebase
# Created: December 2024

version: '3.9'

services:
  # ========================================
  # CORE INFRASTRUCTURE
  # ========================================
  
  # Database - Used by all services
  postgres:
    image: postgres:15-alpine
    container_name: rmb_postgres
    environment:
      POSTGRES_DB: rankmybrand
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Cache & Message Queue - Used for real-time updates
  redis:
    image: redis:7-alpine
    container_name: rmb_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ========================================
  # ACTIVE SERVICES (Verified in code)
  # ========================================

  # API Gateway - Main entry point (Port 4000)
  # Has WebSocket built-in using 'ws' library
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.production
    container_name: rmb_api_gateway
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 4000
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/rankmybrand
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      INTELLIGENCE_SERVICE: http://intelligence-engine:8002
      CRAWLER_SERVICE: http://web-crawler:3002
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Intelligence Engine - Core AI analysis (Port 8002)
  intelligence-engine:
    build:
      context: ./services/intelligence-engine
      dockerfile: Dockerfile
    container_name: rmb_intelligence
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Crawler - Used by enrichment service (Port 3002)
  web-crawler:
    build:
      context: ./services/web-crawler
      dockerfile: Dockerfile
    container_name: rmb_crawler
    environment:
      PORT: 3002
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/rankmybrand
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Dashboard - Admin interface (Port 3000)
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: rmb_dashboard
    environment:
      NEXT_PUBLIC_API_URL: http://api-gateway:4000
      NEXT_PUBLIC_WS_URL: ws://api-gateway:4000/ws
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend - Customer application (Port 3003)
  frontend:
    build:
      context: ./rankmybrand-frontend
      dockerfile: Dockerfile
    container_name: rmb_frontend
    environment:
      NEXT_PUBLIC_API_GATEWAY: http://api-gateway:4000
      NEXT_PUBLIC_WS_URL: ws://api-gateway:4000/ws
    ports:
      - "3003:3003"
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # MONITORING (Optional)
  # ========================================
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rmb_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rmb_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3005:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

# ========================================
# REMOVED SERVICES (Never called in code):
# ========================================
# ❌ ai-response-monitor - No integration found
# ❌ foundation - No API calls found
# ❌ action-center - Configured but never called
# ❌ websocket-server - Redundant (API Gateway has WebSocket)

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: rankmybrand-network
    driver: bridge