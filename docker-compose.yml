version: '3.9'

networks:
  rankmybrand:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
  redis_data:
  geo_data:

services:
  # Infrastructure Layer
  postgres:
    image: postgres:15-alpine
    container_name: rmb_postgres
    environment:
      POSTGRES_DB: rankmybrand
      POSTGRES_USER: rmb_user
      POSTGRES_PASSWORD: rmb_secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rmb_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: rmb_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Python Services with Python 3.12
  geo-calculator:
    build:
      context: ./rankMyBrand.com-main/services/geo-calculator/backend
      dockerfile: Dockerfile.production
    container_name: rmb_geo_calculator
    environment:
      APP_ENV: production
      DATABASE_URL: postgresql://rmb_user:rmb_secure_password@postgres:5432/rankmybrand
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.20
    volumes:
      - ./rankMyBrand.com-main/services/geo-calculator/backend/data:/app/data
      - geo_data:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  intelligence-engine:
    build:
      context: ./services/intelligence-engine
      dockerfile: Dockerfile.production
    container_name: rmb_intelligence_engine
    environment:
      SERVICE_PORT: 8002
      DATABASE_URL: postgresql://rmb_user:rmb_secure_password@postgres:5432/rankmybrand
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PYTHONUNBUFFERED: 1
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Node.js Services
  action-center:
    build:
      context: ./services/action-center
      dockerfile: Dockerfile.production
    container_name: rmb_action_center
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://rmb_user:rmb_secure_password@postgres:5432/rankmybrand
      REDIS_URL: redis://redis:6379
      PORT: 8082
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.30
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  ai-monitor:
    build:
      context: ./services/ai-response-monitor
      dockerfile: Dockerfile.production
    container_name: rmb_ai_monitor
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://rmb_user:rmb_secure_password@postgres:5432/rankmybrand
      REDIS_URL: redis://redis:6379
      PORT: 8001
      HEADLESS_BROWSER: true
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.31
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  web-crawler:
    build:
      context: ./rankMyBrand.com-main/services/web-crawler
      dockerfile: Dockerfile.production
    container_name: rmb_web_crawler
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://rmb_user:rmb_secure_password@postgres:5432/rankmybrand
      REDIS_URL: redis://redis:6379
      PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.32
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.production
    container_name: rmb_api_gateway
    environment:
      NODE_ENV: production
      GATEWAY_PORT: 4000
      REDIS_URL: redis://redis:6379
      GEO_SERVICE: http://geo-calculator:8000
      CRAWLER_SERVICE: http://web-crawler:3002
      INTELLIGENCE_SERVICE: http://intelligence-engine:8002
      ACTION_SERVICE: http://action-center:8082
      WEBSOCKET_SERVICE: http://websocket-server:3001
    ports:
      - "4000:4000"
    depends_on:
      - geo-calculator
      - intelligence-engine
      - action-center
      - web-crawler
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.40
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # WebSocket Server
  websocket-server:
    build:
      context: ./services/websocket-server
      dockerfile: Dockerfile.production
    container_name: rmb_websocket_server
    environment:
      NODE_ENV: production
      WS_PORT: 3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.41
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Frontend Services
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile.production
    container_name: rmb_dashboard
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:3001/ws
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
      - websocket-server
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.50
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    restart: unless-stopped

  frontend:
    build:
      context: ./rankmybrand-frontend
      dockerfile: Dockerfile.production
    container_name: rmb_frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_GATEWAY: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4000/ws
    ports:
      - "3003:3000"
    depends_on:
      - api-gateway
      - websocket-server
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.51
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    restart: unless-stopped

  # Monitoring Stack (Optional but recommended)
  prometheus:
    image: prom/prometheus:latest
    container_name: rmb_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.60
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: rmb_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3005:3000"
    networks:
      rankmybrand:
        ipv4_address: 172.25.0.61
    restart: unless-stopped