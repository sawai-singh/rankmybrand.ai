version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:2.13.1-pg16
    container_name: rankmybrand-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-rankmybrand}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rankmybrand-network

  # Redis for cache + streams + queues
  redis:
    image: redis:7.2.4-alpine
    container_name: rankmybrand-redis
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 2gb 
      --maxmemory-policy allkeys-lru
      --save 60 1
      --save 300 10
      --save 900 100
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rankmybrand-network

  # Caddy API Gateway (automatic HTTPS!)
  caddy:
    image: caddy:2.7.6-alpine
    container_name: rankmybrand-caddy
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"  # Admin API
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rankmybrand-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: rankmybrand-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - rankmybrand-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.3.1
    container_name: rankmybrand-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource,redis-app
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/foundation.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - rankmybrand-network

  # Loki for logs
  loki:
    image: grafana/loki:2.9.4
    container_name: rankmybrand-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - rankmybrand-network

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:0.4.22
    container_name: rankmybrand-chromadb
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    environment:
      ANONYMIZED_TELEMETRY: "false"
      ALLOW_RESET: "true"
    networks:
      - rankmybrand-network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: rankmybrand-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rankmybrand-network

  # BullBoard for job monitoring
  bullboard:
    image: deadly0/bull-board:latest
    container_name: rankmybrand-bullboard
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
    ports:
      - "3010:3000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - rankmybrand-network

  # Uptime Kuma for monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: rankmybrand-uptime
    volumes:
      - uptime_data:/app/data
    ports:
      - "3001:3001"
    networks:
      - rankmybrand-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  chroma_data:
    driver: local
  minio_data:
    driver: local
  uptime_data:
    driver: local

networks:
  rankmybrand-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16