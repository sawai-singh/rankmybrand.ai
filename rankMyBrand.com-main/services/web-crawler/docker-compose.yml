version: '3.8'

services:
  web-crawler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rankmybrand-web-crawler
    ports:
      - "3002:3002"
      - "9091:9091"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://rankmybrand:password@postgres:5432/rankmybrand_crawler
      REDIS_URL: redis://redis:6379
      REDIS_DB: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rankmybrand-network
    volumes:
      - crawler-logs:/app/logs
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: rankmybrand-postgres
    environment:
      POSTGRES_USER: rankmybrand
      POSTGRES_PASSWORD: password
      POSTGRES_DB: rankmybrand_crawler
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rankmybrand"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rankmybrand-network

  redis:
    image: redis:7-alpine
    container_name: rankmybrand-redis
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rankmybrand-network

  # Optional: Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: rankmybrand-grafana
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rankmybrand-network
    depends_on:
      - prometheus

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rankmybrand-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - rankmybrand-network

networks:
  rankmybrand-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  crawler-logs:
  grafana-data:
  prometheus-data:
